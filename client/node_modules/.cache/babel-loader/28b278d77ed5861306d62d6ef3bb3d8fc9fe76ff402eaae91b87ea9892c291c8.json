{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lakshraj\\\\Documents\\\\mern-project\\\\full-mern-stack-video\\\\client\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [quote, setQuote] = useState('');\n  const [tempQuote, setTempQuote] = useState('');\n  const Navigate = useNavigate();\n  const populateQuote = async () => {\n    const req = await fetch('http://localhost:2000/api/quote', {\n      headers: {\n        'x-access-token': localStorage.getItem('token')\n      }\n    });\n    const data = await req.json();\n    if (data.status === 'ok') {\n      setQuote(data.quote);\n    } else {\n      alert(data.error);\n    }\n  };\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const user = jwt.decode(token);\n      if (!user) {\n        localStorage.removeItem('token');\n        Navigate('/login');\n      } else {\n        populateQuote();\n      }\n    }\n  }, []);\n  const updateQuote = async event => {\n    event.preventDefault();\n    const req = await fetch('http://localhost:2000/api/quote', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-access-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        quote: tempQuote\n      })\n    });\n    const data = await req.json();\n    if (data.status === 'ok') {\n      setQuote(tempQuote);\n      setTempQuote('');\n    } else {\n      alert(data.error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Your quote: \", quote || 'No quote found']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: updateQuote,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Quote\",\n        value: tempQuote,\n        onChange: e => setTempQuote(e.target.value),\n        name: \"quote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Update quote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"otLjCHaoa3OJMFznqWk6xyMdu0s=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","Dashboard","_s","quote","setQuote","tempQuote","setTempQuote","Navigate","populateQuote","req","fetch","headers","localStorage","getItem","data","json","status","alert","error","token","user","jwt","decode","removeItem","updateQuote","event","preventDefault","method","body","JSON","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","e","target","name","_c","$RefreshReg$"],"sources":["C:/Users/Lakshraj/Documents/mern-project/full-mern-stack-video/client/src/pages/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst Dashboard = () => {\r\n\r\n  const [quote, setQuote] = useState('')\r\n  const [tempQuote, setTempQuote] = useState('')\r\n  const Navigate = useNavigate()\r\n\r\n  const populateQuote =async()=> {\r\n    const req = await fetch('http://localhost:2000/api/quote', {\r\n        headers: {\r\n            'x-access-token': localStorage.getItem('token'),\r\n        },\r\n    })\r\n\r\n    const data = await req.json()\r\n    if (data.status === 'ok') {\r\n        setQuote(data.quote)\r\n    } else {\r\n        alert(data.error)\r\n    }\r\n}\r\n\r\nuseEffect(() => {\r\n  const token = localStorage.getItem('token')\r\n  if (token) {\r\n      const user = jwt.decode(token)\r\n      if (!user) {\r\n          localStorage.removeItem('token')\r\n          Navigate('/login')\r\n      } else {\r\n          populateQuote()\r\n      }\r\n  }\r\n}, [])\r\n\r\nconst updateQuote=async(event) =>{\r\n  event.preventDefault()\r\n\r\n  const req = await fetch('http://localhost:2000/api/quote', {\r\n      method: 'POST',\r\n      headers: {\r\n          'Content-Type': 'application/json',\r\n          'x-access-token': localStorage.getItem('token'),\r\n      },\r\n      body: JSON.stringify({\r\n          quote: tempQuote,\r\n      }),\r\n  })\r\n\r\n  const data = await req.json()\r\n  if (data.status === 'ok') {\r\n      setQuote(tempQuote)\r\n      setTempQuote('')\r\n  } else {\r\n      alert(data.error)\r\n  }\r\n}\r\n  return (\r\n    <div>\r\n      <h1>Your quote: {quote || 'No quote found'}</h1>\r\n      <form onSubmit={updateQuote}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Quote\"\r\n          value={tempQuote}\r\n          onChange={(e) => setTempQuote(e.target.value)}\r\n          name='quote'\r\n        />\r\n        <input type=\"submit\" value=\"Update quote\" />\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}