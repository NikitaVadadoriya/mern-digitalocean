[{"C:\\Users\\Lakshraj\\Documents\\mern-project\\full-mern-stack-video\\client\\src\\index.js":"1","C:\\Users\\Lakshraj\\Documents\\mern-project\\full-mern-stack-video\\client\\src\\App.js":"2","C:\\Users\\Lakshraj\\Documents\\mern-project\\full-mern-stack-video\\client\\src\\pages\\Login.js":"3","C:\\Users\\Lakshraj\\Documents\\mern-project\\full-mern-stack-video\\client\\src\\pages\\Register.js":"4","C:\\Users\\Lakshraj\\Documents\\mern-project\\full-mern-stack-video\\client\\src\\pages\\Dashboard.js":"5"},{"size":234,"mtime":1691390170280,"results":"6","hashOfConfig":"7"},{"size":579,"mtime":1691565733632,"results":"8","hashOfConfig":"7"},{"size":1709,"mtime":1691565647438,"results":"9","hashOfConfig":"7"},{"size":3034,"mtime":1691565643329,"results":"10","hashOfConfig":"7"},{"size":1938,"mtime":1691566828133,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1eke47g",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"C:\\Users\\Lakshraj\\Documents\\mern-project\\full-mern-stack-video\\client\\src\\index.js",[],[],[],"C:\\Users\\Lakshraj\\Documents\\mern-project\\full-mern-stack-video\\client\\src\\App.js",[],[],"C:\\Users\\Lakshraj\\Documents\\mern-project\\full-mern-stack-video\\client\\src\\pages\\Login.js",["31","32"],[],"import React, { useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport '../App.css'\r\n\r\nconst Login = () => {\r\n  const Navigate = useNavigate()\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n\r\n  const loginUser = async (event) => {\r\n    event.preventDefault()\r\n    if(!email ==\"\" && !password == \"\"){\r\n    const response = await fetch('/api/login', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            email,\r\n            password,\r\n        }),\r\n    })\r\n    const data = await response.json()\r\n    if (data.user) {\r\n        localStorage.setItem('token', data.user)\r\n        alert('Login successful')\r\n        Navigate('/dashboard')\r\n    } else {\r\n        alert('Please check your username and password')\r\n    }\r\n  }\r\n  else{\r\n    alert('something are wrong..!!!')\r\n  }\r\n}\r\n  return (\r\n    <div>\r\n      <form onSubmit={loginUser} className='main'>\r\n      <h1>Login</h1>\r\n\r\n        <label for=\"email\">Email Id ::</label>\r\n        &nbsp;<input\r\n          name='email'\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          className='input'\r\n\r\n        />\r\n        <br /><br/>\r\n        <label for=\"password\">password ::</label>\r\n        &nbsp;<input\r\n          name='password'\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          className='input'\r\n\r\n        />\r\n        <br /><br/>\r\n        <input type=\"submit\" value=\"Login\" className='btn' />\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login","C:\\Users\\Lakshraj\\Documents\\mern-project\\full-mern-stack-video\\client\\src\\pages\\Register.js",["33","34","35","36","37"],[],"import React, { useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport '../App.css'\r\n\r\nconst Register = () => {\r\n    const Navigate = useNavigate()\r\n\r\n    const [userName, setUserName] = useState('')\r\n    const [fullName, setFullName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const adduser = async (event) => {\r\n        event.preventDefault()\r\n        if (!userName == \"\" && !fullName == \"\" && !email == \"\" && !password == \"\") {\r\n            const response = await fetch('/api/register', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    userName,\r\n                    fullName,\r\n                    email,\r\n                    password,\r\n                }),\r\n            })\r\n                .then((res) => {\r\n                    Navigate('/login')\r\n                })\r\n        }\r\n        else {\r\n            alert('something are wrong')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div >\r\n\r\n                <form onSubmit={adduser} className='main'>\r\n                    <h1>Register</h1>\r\n                    <label for=\"username\">UserName ::</label>\r\n                    &nbsp; <input\r\n                        name='userName'\r\n                        onChange={(e) => setUserName(e.target.value)}\r\n                        type=\"text\"\r\n                        placeholder=\"Username\"\r\n                        className='input'\r\n                    />\r\n                    <br /><br />\r\n                    <label for=\"fullName\">Full Name  ::</label>\r\n                    &nbsp;<input\r\n                        name='fullName'\r\n                        onChange={(e) => setFullName(e.target.value)}\r\n                        type=\"text\"\r\n                        placeholder=\"Fullname\"\r\n                        className='input'\r\n                    />\r\n                    <br /><br />\r\n                    <label for=\"email\">Email Id ::</label>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;<input\r\n                        name='email'\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        className='input'\r\n                    />\r\n                    <br /><br />\r\n                    <label for=\"password\">Password ::</label>\r\n                    &nbsp;&nbsp;&nbsp;<input\r\n                        name='password'\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        className='input'\r\n                    />\r\n                    <br /><br />\r\n                    <input type=\"submit\" value=\"Register\" className='btn' />\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","C:\\Users\\Lakshraj\\Documents\\mern-project\\full-mern-stack-video\\client\\src\\pages\\Dashboard.js",["38"],[],"import React, { useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nconst Dashboard = () => {\r\n\r\n  const [quote, setQuote] = useState('')\r\n  const [tempQuote, setTempQuote] = useState('')\r\n  const Navigate = useNavigate()\r\n\r\n  const populateQuote =async()=> {\r\n    const req = await fetch('/api/quote', {\r\n        headers: {\r\n            'x-access-token': localStorage.getItem('token'),\r\n        },\r\n    })\r\n\r\n    const data = await req.json()\r\n    if (data.status === 'add quote...') {\r\n        setQuote(data.quote)\r\n    } else {\r\n        alert(data.error)\r\n    }\r\n}\r\n\r\nuseEffect(() => {\r\n  const token = localStorage.getItem('token')\r\n  if (token) {\r\n      const user = jwt_decode(token)\r\n      if (!user) {\r\n          localStorage.removeItem('token')\r\n          Navigate('/login')\r\n      } else {\r\n          populateQuote()\r\n      }\r\n  }\r\n}, [])\r\n\r\nconst updateQuote=async(event) =>{\r\n  event.preventDefault()\r\n\r\n  const req = await fetch('/api/quote', {\r\n      method: 'POST',\r\n      headers: {\r\n          'Content-Type': 'application/json',\r\n          'x-access-token': localStorage.getItem('token'),\r\n      },\r\n      body: JSON.stringify({\r\n          quote: tempQuote,\r\n      }),\r\n  })\r\n\r\n  const data = await req.json()\r\n  if (data.status === 'ok') {\r\n      setQuote(tempQuote)\r\n      setTempQuote('')\r\n  } else {\r\n      alert(data.error)\r\n  }\r\n}\r\n  return (\r\n    <div className='dash'>\r\n      <h1 style={{color:'white'}}>Your quote: {quote || 'No quote found'}</h1>\r\n      <form onSubmit={updateQuote}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Quote\"\r\n          value={tempQuote}\r\n          onChange={(e) => setTempQuote(e.target.value)}\r\n          name='quote'\r\n          className='input'\r\n        />\r\n        <input type=\"submit\" value=\"Update quote\"  className='btn1'/>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard",{"ruleId":"39","severity":1,"message":"40","line":12,"column":15,"nodeType":"41","messageId":"42","endLine":12,"endColumn":17},{"ruleId":"39","severity":1,"message":"40","line":12,"column":33,"nodeType":"41","messageId":"42","endLine":12,"endColumn":35},{"ruleId":"39","severity":1,"message":"40","line":15,"column":23,"nodeType":"41","messageId":"42","endLine":15,"endColumn":25},{"ruleId":"39","severity":1,"message":"40","line":15,"column":42,"nodeType":"41","messageId":"42","endLine":15,"endColumn":44},{"ruleId":"39","severity":1,"message":"40","line":15,"column":58,"nodeType":"41","messageId":"42","endLine":15,"endColumn":60},{"ruleId":"39","severity":1,"message":"40","line":15,"column":77,"nodeType":"41","messageId":"42","endLine":15,"endColumn":79},{"ruleId":"43","severity":1,"message":"44","line":16,"column":19,"nodeType":"45","messageId":"46","endLine":16,"endColumn":27},{"ruleId":"47","severity":1,"message":"48","line":37,"column":4,"nodeType":"49","endLine":37,"endColumn":6,"suggestions":"50"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Navigate'. Either include it or remove the dependency array.","ArrayExpression",["51"],{"desc":"52","fix":"53"},"Update the dependencies array to be: [Navigate]",{"range":"54","text":"55"},[917,919],"[Navigate]"]